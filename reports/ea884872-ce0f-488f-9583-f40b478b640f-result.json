{"name": "test_password_hashing", "status": "broken", "statusDetails": {"message": "sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not translate host name \"postgres\" to address: Name or service not known\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "trace": "self = <sqlalchemy.engine.base.Connection object at 0x0000018997304690>\nengine = Engine(postgresql://auth_user:***@postgres:5432/test_auth_api_db)\nconnection = None, _has_events = None, _allow_revalidate = True\n_allow_autobegin = True\n\n    def __init__(\n        self,\n        engine: Engine,\n        connection: Optional[PoolProxiedConnection] = None,\n        _has_events: Optional[bool] = None,\n        _allow_revalidate: bool = True,\n        _allow_autobegin: bool = True,\n    ):\n        \"\"\"Construct a new Connection.\"\"\"\n        self.engine = engine\n        self.dialect = dialect = engine.dialect\n    \n        if connection is None:\n            try:\n>               self._dbapi_connection = engine.raw_connection()\n                                         ^^^^^^^^^^^^^^^^^^^^^^^\n\nvenv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:143: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:3295: in raw_connection\n    return self.pool.connect()\n           ^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:447: in connect\n    return _ConnectionFairy._checkout(self)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:1264: in _checkout\n    fairy = _ConnectionRecord.checkout(pool)\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:711: in checkout\n    rec = pool._do_get()\n          ^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\sqlalchemy\\pool\\impl.py:177: in _do_get\n    with util.safe_reraise():\n         ^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:224: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nvenv\\Lib\\site-packages\\sqlalchemy\\pool\\impl.py:175: in _do_get\n    return self._create_connection()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:388: in _create_connection\n    return _ConnectionRecord(self)\n           ^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:673: in __init__\n    self.__connect()\nvenv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:899: in __connect\n    with util.safe_reraise():\n         ^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:224: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nvenv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:895: in __connect\n    self.dbapi_connection = connection = pool._invoke_creator(self)\n                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\sqlalchemy\\engine\\create.py:646: in connect\n    return dialect.connect(*cargs, **cparams)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:626: in connect\n    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndsn = 'host=postgres dbname=test_auth_api_db user=auth_user password=auth_password port=5432'\nconnection_factory = None, cursor_factory = None\nkwargs = {'dbname': 'test_auth_api_db', 'host': 'postgres', 'password': 'auth_password', 'port': 5432, ...}\nkwasync = {}\n\n    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n        \"\"\"\n        Create a new database connection.\n    \n        The connection parameters can be specified as a string:\n    \n            conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n    \n        or using a set of keyword arguments:\n    \n            conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n    \n        Or as a mix of both. The basic connection parameters are:\n    \n        - *dbname*: the database name\n        - *database*: the database name (only as keyword argument)\n        - *user*: user name used to authenticate\n        - *password*: password used to authenticate\n        - *host*: database host address (defaults to UNIX socket if not provided)\n        - *port*: connection port number (defaults to 5432 if not provided)\n    \n        Using the *connection_factory* parameter a different class or connections\n        factory can be specified. It should be a callable object taking a dsn\n        argument.\n    \n        Using the *cursor_factory* parameter, a new default cursor factory will be\n        used by cursor().\n    \n        Using *async*=True an asynchronous connection will be created. *async_* is\n        a valid alias (for Python versions where ``async`` is a keyword).\n    \n        Any other keyword parameter will be passed to the underlying client\n        library: the list of supported parameters depends on the library version.\n    \n        \"\"\"\n        kwasync = {}\n        if 'async' in kwargs:\n            kwasync['async'] = kwargs.pop('async')\n        if 'async_' in kwargs:\n            kwasync['async_'] = kwargs.pop('async_')\n    \n        dsn = _ext.make_dsn(dsn, **kwargs)\n>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       psycopg2.OperationalError: could not translate host name \"postgres\" to address: Name or service not known\n\nvenv\\Lib\\site-packages\\psycopg2\\__init__.py:135: OperationalError\n\nThe above exception was the direct cause of the following exception:\n\nfixturedef = <FixtureDef argname='db_session' scope='function' baseid='secure-auth-api/tests'>\nrequest = <SubRequest 'db_session' for <Function test_password_hashing>>\n\n    @pytest.hookimpl(wrapper=True)\n    def pytest_fixture_setup(fixturedef: FixtureDef, request) -> object | None:\n        asyncio_mode = _get_asyncio_mode(request.config)\n        if not _is_asyncio_fixture_function(fixturedef.func):\n            if asyncio_mode == Mode.STRICT:\n                # Ignore async fixtures without explicit asyncio mark in strict mode\n                # This applies to pytest_trio fixtures, for example\n>               return (yield)\n                        ^^^^^\n\nvenv\\Lib\\site-packages\\pytest_asyncio\\plugin.py:681: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests\\conftest.py:35: in db_session\n    connection = engine.connect()\n                 ^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:3271: in connect\n    return self._connection_cls(self)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:145: in __init__\n    Connection._handle_dbapi_exception_noconnection(\nvenv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2434: in _handle_dbapi_exception_noconnection\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nvenv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:143: in __init__\n    self._dbapi_connection = engine.raw_connection()\n                             ^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:3295: in raw_connection\n    return self.pool.connect()\n           ^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:447: in connect\n    return _ConnectionFairy._checkout(self)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:1264: in _checkout\n    fairy = _ConnectionRecord.checkout(pool)\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:711: in checkout\n    rec = pool._do_get()\n          ^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\sqlalchemy\\pool\\impl.py:177: in _do_get\n    with util.safe_reraise():\n         ^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:224: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nvenv\\Lib\\site-packages\\sqlalchemy\\pool\\impl.py:175: in _do_get\n    return self._create_connection()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:388: in _create_connection\n    return _ConnectionRecord(self)\n           ^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:673: in __init__\n    self.__connect()\nvenv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:899: in __connect\n    with util.safe_reraise():\n         ^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:224: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nvenv\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:895: in __connect\n    self.dbapi_connection = connection = pool._invoke_creator(self)\n                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\sqlalchemy\\engine\\create.py:646: in connect\n    return dialect.connect(*cargs, **cparams)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:626: in connect\n    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndsn = 'host=postgres dbname=test_auth_api_db user=auth_user password=auth_password port=5432'\nconnection_factory = None, cursor_factory = None\nkwargs = {'dbname': 'test_auth_api_db', 'host': 'postgres', 'password': 'auth_password', 'port': 5432, ...}\nkwasync = {}\n\n    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n        \"\"\"\n        Create a new database connection.\n    \n        The connection parameters can be specified as a string:\n    \n            conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n    \n        or using a set of keyword arguments:\n    \n            conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n    \n        Or as a mix of both. The basic connection parameters are:\n    \n        - *dbname*: the database name\n        - *database*: the database name (only as keyword argument)\n        - *user*: user name used to authenticate\n        - *password*: password used to authenticate\n        - *host*: database host address (defaults to UNIX socket if not provided)\n        - *port*: connection port number (defaults to 5432 if not provided)\n    \n        Using the *connection_factory* parameter a different class or connections\n        factory can be specified. It should be a callable object taking a dsn\n        argument.\n    \n        Using the *cursor_factory* parameter, a new default cursor factory will be\n        used by cursor().\n    \n        Using *async*=True an asynchronous connection will be created. *async_* is\n        a valid alias (for Python versions where ``async`` is a keyword).\n    \n        Any other keyword parameter will be passed to the underlying client\n        library: the list of supported parameters depends on the library version.\n    \n        \"\"\"\n        kwasync = {}\n        if 'async' in kwargs:\n            kwasync['async'] = kwargs.pop('async')\n        if 'async_' in kwargs:\n            kwasync['async_'] = kwargs.pop('async_')\n    \n        dsn = _ext.make_dsn(dsn, **kwargs)\n>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not translate host name \"postgres\" to address: Name or service not known\nE       \nE       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n\nvenv\\Lib\\site-packages\\psycopg2\\__init__.py:135: OperationalError"}, "start": 1754498420785, "stop": 1754498420785, "uuid": "e169c019-9ee2-4469-bb46-f51a12bf3f11", "historyId": "feb2df354cbb5225e32c394320f102da", "testCaseId": "feb2df354cbb5225e32c394320f102da", "fullName": "secure-auth-api.tests.test_users.TestSecurityFeatures#test_password_hashing", "labels": [{"name": "parentSuite", "value": "secure-auth-api.tests"}, {"name": "suite", "value": "test_users"}, {"name": "subSuite", "value": "TestSecurityFeatures"}, {"name": "host", "value": "DESKTOP-32KVTAU"}, {"name": "thread", "value": "19212-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "secure-auth-api.tests.test_users"}], "titlePath": ["secure-auth-api", "tests", "test_users.py", "TestSecurityFeatures"]}